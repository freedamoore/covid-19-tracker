{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/view-button/view-button.jsx","components/list-item/list-item.jsx","components/list/list.jsx","components/search-box/search-box.jsx","components/stats/stats.jsx","components/popup/popup.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","x","title","count","className","undefined","toString","replace","CardList","props","global","total_cases","total_deaths","total_affected_countries","ViewButton","countryName","countryCode","countryCases","countryDeaths","handleViewClick","href","onClick","numberWithCommas","ListItem","country","globalCases","globalDeaths","toFixed","code","List","countries","map","key","ourid","SearchBox","placeholder","handleChange","type","onChange","Stats","date","statsData","index","totalDays","highest","calcPixels","inputVal","totalVal","Math","ceil","style","left","height","new_daily_cases","new_daily_deaths","Popup","timelineData","id","data","length","App","e","setState","searchField","target","value","name","cases","deaths","fetch","then","response","json","items","Object","entries","timelineitems","state","apiDown","Promise","all","resultGlobal","resultCountry","results","values","countryitems","catch","err","console","log","this","filteredCountries","filter","toLowerCase","includes","color","paddingBottom","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e24b655f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nfunction numberWithCommas(x) {\r\n    x = x + \"\"; //to get rid of TypeError: Cannot read property 'toString' of undefined\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport const Card = ({title, count}) => (\r\n    <div className='card-border'>\r\n        <div className='card-container'>\r\n            <h2>{title}</h2>\r\n            <p>{count===undefined? 'Retrieving data...': numberWithCommas(count)}</p>\r\n        </div>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.css';\r\nimport { Card } from '../card/card';\r\n\r\nexport const CardList = (props) => {\r\n  const {total_cases, total_deaths, total_affected_countries} = props.global;\r\n  \r\n    return(\r\n        <div className=\"card-list\">\r\n          <Card title='Total Cases' count={ total_cases }/>\r\n          <Card title='Total Deaths' count={ total_deaths }/>\r\n          <Card title='Countries Affected' count={ total_affected_countries }/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './view-button.css';\r\n\r\nexport const ViewButton = ({countryName, countryCode, countryCases, countryDeaths, handleViewClick})=>(\r\n    <div>\r\n        {/* <button className='timeline-button' onClick={() => handleViewClick(countryCode, countryName)}>View</button> */}\r\n        <a href=\"#popup\" className='timeline-button' onClick={() => handleViewClick(countryCode, countryName, countryCases, countryDeaths)}>View</a>\r\n    </div>\r\n);","import React from 'react';\r\nimport './list-item.css';\r\nimport {ViewButton} from '../view-button/view-button';\r\n\r\nfunction numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport const ListItem = ({country, globalCases, globalDeaths, handleViewClick}) => (\r\n    <div className='items'>\r\n        <div className='item-block'><span>{country.title}</span></div>\r\n        <div className='item-block'><span>{numberWithCommas(country.total_cases)}</span></div>\r\n        <div className='item-block'><span>{numberWithCommas(country.total_deaths)}</span></div>\r\n        <div className='item-block'><span>{((country.total_cases / globalCases)*100).toFixed(1)}%</span></div>\r\n        <div className='item-block'><span>{((country.total_deaths / globalDeaths)*100).toFixed(1)}%</span></div> \r\n        <div className='item-block timeline-block-item'><ViewButton countryName = {country.title} \r\n                                                countryCode={country.code} \r\n                                                countryCases={country.total_cases}\r\n                                                countryDeaths={country.total_deaths}\r\n                                                handleViewClick={handleViewClick}/></div>\r\n    </div>\r\n);","import React from 'react';\r\nimport './list.css';\r\nimport { ListItem } from '../list-item/list-item';\r\n\r\n\r\nexport const List = (props) => {\r\n  const {total_cases, total_deaths} = props.global;\r\n   \r\n    return(\r\n      <div className=\"stats-table\">\r\n        <div className='item-headings'>\r\n          <div className=\"header-block\"><span>Country</span></div>\r\n          <div className=\"header-block\"><span>Total Cases</span></div>\r\n          <div className=\"header-block\"><span>Total Deaths</span></div>\r\n          <div className=\"header-block\"><span>% of Global Cases</span></div>\r\n          <div className=\"header-block\"><span>% of Global Deaths</span></div>\r\n          <div className=\"header-block timeline-block\"><span>Timeline</span></div>\r\n        </div>\r\n        <div className='list-items'>\r\n        {\r\n          props.countries.map(country => \r\n            (<ListItem key={country.ourid} \r\n                      country={country} \r\n                      globalCases={total_cases} \r\n                      globalDeaths={total_deaths}\r\n                      handleViewClick={props.handleViewClick}\r\n            />))\r\n        }\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\n// \"title\": \"Russia\",\r\n// \"code\": \"RU\",\r\n// \"source\": \"https://thevirustracker.com/russia-coronavirus-information-ru\",\r\n// \"total_cases\": 57999,\r\n// \"total_recovered\": 4420,\r\n// \"total_unresolved\": 0,\r\n// \"total_deaths\": 513,\r\n// \"total_new_cases_today\": 0,\r\n// \"total_new_deaths_today\": 0,\r\n// \"total_active_cases\": 53066,\r\n// \"total_serious_cases\": 700","import React from 'react';\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange} \r\n    />\r\n);","import React from 'react';\r\nimport './stats.css';\r\n\r\nexport const Stats = ({date, statsData, countryCases, countryDeaths, index, totalDays, highest}) => {\r\n\r\n    function calcPixels(inputVal, totalVal){\r\n        let x;\r\n        // (inputVal>0 && totalVal>0) ? x = Math.ceil((inputVal*400)/(countryCases)):x=0;\r\n        (inputVal>0 && totalVal>0) ? x = Math.ceil((inputVal*400)/ highest):x=0;\r\n        \r\n        return x;\r\n       \r\n    }\r\n\r\n    function numberWithCommas(x) {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    return(\r\n    <div className='stat-bar-container' style={{left: `${(index)*(900/totalDays)}px`}}>\r\n            <div className='stat-bar' style={{height: `${calcPixels(statsData.new_daily_cases, countryCases)}px`}}>\r\n                <span className=\"show-count\"> {date} cases: {numberWithCommas(statsData.new_daily_cases)} deaths: {numberWithCommas(statsData.new_daily_deaths)}</span>\r\n                <div className='inner-stat-bar' style={{height: `${calcPixels(statsData.new_daily_deaths, countryCases)}px`}}></div>\r\n            </div>\r\n            <div className='timeline-date'> {(index===0)?`Timeline First Case: ${date}`:''}</div>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport './popup.css';\r\nimport {Stats} from '../stats/stats';\r\n\r\nfunction numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport const Popup = ({timelineData, countryName, countryCases, countryDeaths}) => {\r\n    let highest = 0;\r\n    return(        \r\n    <div className=\"popup\" id=\"popup\">\r\n        <div className=\"popup__content\">\r\n            <a href=\"#\" className=\"popup__close\">&times;</a>\r\n            <h2>{countryName}</h2>\r\n            <div className=\"headings-box\">\r\n                <h3 className=\"headings-box-1\">Total Cases: {numberWithCommas(countryCases)}</h3>\r\n                <h3 className=\"headings-box-2\">Total Deaths: {numberWithCommas(countryDeaths)}</h3>\r\n            </div>\r\n            <div>\r\n                {   //get the highest number of cases for a day to pass into the graph\r\n                    timelineData.map((data, index) => {\r\n                        if(data[0]!== \"stat\"){\r\n                            highest< data[1].new_daily_cases? highest=data[1].new_daily_cases: highest=highest;\r\n                            } })\r\n                }\r\n            </div>\r\n            <div className=\"stat-layout\">\r\n                {   \r\n                    timelineData.map((data, index) => {\r\n                        if(data[0]!== \"stat\")\r\n                            return  (<Stats key={data[0]} \r\n                                            date={data[0]} \r\n                                            statsData={data[1]} \r\n                                            countryCases={countryCases}\r\n                                            countryDeaths={countryDeaths}\r\n                                            index={index}\r\n                                            totalDays={timelineData.length}\r\n                                            highest={highest}\r\n                                    />) })\r\n                }\r\n            </div>\r\n            <h4>Hover over bar to see the number of cases for that day.</h4>\r\n        </div>\r\n    </div>\r\n);\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList} from './components/card-list/card-list';\r\nimport { List } from './components/list/list';\r\nimport { SearchBox } from './components/search-box/search-box';\r\nimport  {Popup} from './components/popup/popup';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      global: [],\r\n      countries: [],\r\n      searchField: '',\r\n      countryName:'',\r\n      countryCases: '',\r\n      countryDeaths: '',\r\n      timelineData: [],\r\n      apiDown: false\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    const globalStatsUrl = 'https://api.thevirustracker.com/free-api?global=stats';\r\n    const countryStatsUrl = 'https://api.thevirustracker.com/free-api?countryTotals=ALL';\r\n\r\n    Promise.all([fetch(globalStatsUrl), fetch(countryStatsUrl)])\r\n    .then(([resultGlobal, resultCountry]) => { return Promise.all([resultGlobal.json(), resultCountry.json()])})\r\n    .then(items => this.setState({global: items[0].results[0], countries: Object.values(items[1].countryitems[0])}))\r\n    .catch(err => {console.log(err); this.setState({apiDown: true})} );\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({searchField: e.target.value});\r\n  }\r\n\r\n  handleViewClick = (code, name, cases, deaths) => {\r\n    const url = 'https://api.thevirustracker.com/free-api?countryTimeline=' + code;\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      //  .then(items => console.log(Object.entries(items.timelineitems[0])));\r\n      .then(items => this.setState({countryName: name, countryCases: cases, countryDeaths: deaths, timelineData: Object.entries(items.timelineitems[0])}));\r\n  }\r\n\r\n  render(){\r\n    const { global, countries, searchField, timelineData, countryName, countryCases, countryDeaths, apiDown } = this.state;\r\n\r\n    const filteredCountries = countries.filter(country => \r\n      (typeof country.title !== 'undefined')? \r\n        country.title.toLowerCase().includes(searchField.toLowerCase()) \r\n        : null\r\n      );\r\n      \r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"header\">\r\n          <h1>Covid-19 Tracker</h1>\r\n          {apiDown? <h2 style={{color:\"#e8308c\",paddingBottom:\"50px\"}}>The API we retrieve our data from is down at the moment. Please try again later</h2>: <CardList global={global} />  }\r\n        </div>\r\n        <div className='sub-header'>\r\n            <h3>Affected Countries</h3>\r\n            <SearchBox placeholder='Search Countries' handleChange={this.handleChange}/>\r\n        </div>                      \r\n        <List countries={filteredCountries} global={global} handleViewClick={this.handleViewClick}/>       \r\n        <div className=\"footer\">Built by <a href=\"https://freedamoore.github.io/\" target=\"_blank\" >Freeda Moore</a> for the ZTM coding_challenge-26 using the virus tracker API.</div>\r\n        <Popup timelineData={timelineData} countryName={countryName} countryCases={countryCases} countryDeaths={countryDeaths}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}