{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","country","Country","TotalConfirmed","CardList","countries","map","key","Slug","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","global","fetch","then","response","json","items","Global","Countries","filter","item","this","filteredCountries","toLowerCase","includes","NewConfirmed","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAGaA,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,4BAAKD,EAAME,QAAQC,SACnB,qDAA2BH,EAAME,QAAQE,mBCFpCC,EAAW,SAACL,GAErB,OACI,yBAAKC,UAAU,aAEbD,EAAMM,UAAUC,KAAI,SAAAL,GAAO,OAAK,kBAAC,EAAD,CAAMM,IAAKN,EAAQO,KAAMP,QAASA,SCN/DQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCHG,E,kDAxCb,aAAc,IAAD,8BACX,gBAiBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXC,OAAQ,GACRhB,UAAW,GACXY,YAAa,IANJ,E,gEAWO,IAAD,OACjBK,MAAM,sCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,OAAQK,EAAMC,OAAQtB,UAAWqB,EAAME,UAAUC,QAAO,SAAAC,GAAI,OAAIA,EAAK3B,eAAiB,Y,+BAO/G,IAAD,EACqC4B,KAAKX,MAAxCC,EADF,EACEA,OAAQhB,EADV,EACUA,UAAWY,EADrB,EACqBA,YACrBe,EAAoB3B,EAAUwB,QAAO,SAAA5B,GAAO,OAChDA,EAAQC,QAAQ+B,cAAcC,SAASjB,EAAYgB,kBAGrD,OACE,yBAAKjC,UAAU,OACb,gDACA,8CAAoBqB,EAAOc,cAC3B,kDACA,kBAAC,EAAD,CAAWzB,YAAY,mBAAmBC,aAAcoB,KAAKpB,eAC7D,kBAAC,EAAD,CAAUN,UAAW2B,S,GApCXI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c0b72f3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <h2>{props.country.Country}</h2>\r\n        <p>Total Cases Confirmed: {props.country.TotalConfirmed}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.css';\r\nimport { Card } from '../card/card';\r\n\r\nexport const CardList = (props) => {\r\n    \r\n    return(\r\n        <div className=\"card-list\">\r\n        {\r\n          props.countries.map(country => (<Card key={country.Slug} country={country} />))\r\n        }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange} \r\n    />\r\n);","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList} from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nclass App extends Component {\n  \n  constructor(){\n    super();\n\n    this.state = {\n      global: [],\n      countries: [],\n      searchField: ''\n    };\n\n  }\n\n  componentDidMount(){\n    fetch('https://api.covid19api.com/summary')\n      .then(response => response.json())\n      // .then(items => console.log(items.Countries));\n      .then(items => this.setState({global: items.Global, countries: items.Countries.filter(item => item.TotalConfirmed > 0)}) );\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render(){\n    const { global, countries, searchField } = this.state;\n    const filteredCountries = countries.filter(country => \n      country.Country.toLowerCase().includes(searchField.toLowerCase())\n\n      );\n    return (\n      <div className=\"App\">\n        <h1>Covid-19 Tracker</h1>\n        <h1>New Confirmed: {global.NewConfirmed}</h1>\n        <h3>Affected Countries</h3>\n        <SearchBox placeholder='Search Countries' handleChange={this.handleChange}/>\n        <CardList countries={filteredCountries} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}